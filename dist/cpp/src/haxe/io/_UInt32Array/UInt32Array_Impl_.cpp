// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io__ArrayBufferView_ArrayBufferView_Impl_
#include <haxe/io/_ArrayBufferView/ArrayBufferView_Impl_.h>
#endif
#ifndef INCLUDED_haxe_io__UInt32Array_UInt32Array_Impl_
#include <haxe/io/_UInt32Array/UInt32Array_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b5eac9a5ee86dcc1_69_fromData,"haxe.io._UInt32Array.UInt32Array_Impl_","fromData",0x4547640f,"haxe.io._UInt32Array.UInt32Array_Impl_.fromData","/usr/share/haxe/std/haxe/io/UInt32Array.hx",69,0xfcf50079)
HX_LOCAL_STACK_FRAME(_hx_pos_b5eac9a5ee86dcc1_82_fromBytes,"haxe.io._UInt32Array.UInt32Array_Impl_","fromBytes",0x424022e6,"haxe.io._UInt32Array.UInt32Array_Impl_.fromBytes","/usr/share/haxe/std/haxe/io/UInt32Array.hx",82,0xfcf50079)
namespace haxe{
namespace io{
namespace _UInt32Array{

void UInt32Array_Impl__obj::__construct() { }

Dynamic UInt32Array_Impl__obj::__CreateEmpty() { return new UInt32Array_Impl__obj; }

void *UInt32Array_Impl__obj::_hx_vtable = 0;

Dynamic UInt32Array_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< UInt32Array_Impl__obj > _hx_result = new UInt32Array_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UInt32Array_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x771e64ab;
}

 ::haxe::io::ArrayBufferViewImpl UInt32Array_Impl__obj::fromData( ::haxe::io::ArrayBufferViewImpl d){
            	HX_STACKFRAME(&_hx_pos_b5eac9a5ee86dcc1_69_fromData)
HXDLIN(  69)		return d;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt32Array_Impl__obj,fromData,return )

 ::haxe::io::ArrayBufferViewImpl UInt32Array_Impl__obj::fromBytes( ::haxe::io::Bytes bytes,hx::Null< int >  __o_bytePos, ::Dynamic length){
int bytePos = __o_bytePos.Default(0);
            	HX_STACKFRAME(&_hx_pos_b5eac9a5ee86dcc1_82_fromBytes)
HXDLIN(  82)		 ::Dynamic this1;
HXDLIN(  82)		if (hx::IsNull( length )) {
HXDLIN(  82)			this1 = ((int)(bytes->length - bytePos) >> (int)(int)2);
            		}
            		else {
HXDLIN(  82)			this1 = length;
            		}
HXDLIN(  82)		return ::haxe::io::_UInt32Array::UInt32Array_Impl__obj::fromData(::haxe::io::_ArrayBufferView::ArrayBufferView_Impl__obj::fromBytes(bytes,bytePos,((int)this1 << (int)(int)2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(UInt32Array_Impl__obj,fromBytes,return )


UInt32Array_Impl__obj::UInt32Array_Impl__obj()
{
}

bool UInt32Array_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"fromData") ) { outValue = fromData_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *UInt32Array_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo *UInt32Array_Impl__obj_sStaticStorageInfo = 0;
#endif

static void UInt32Array_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UInt32Array_Impl__obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UInt32Array_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UInt32Array_Impl__obj::__mClass,"__mClass");
};

#endif

hx::Class UInt32Array_Impl__obj::__mClass;

static ::String UInt32Array_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("fromData","\xb4","\x24","\x2f","\xa0"),
	HX_HCSTRING("fromBytes","\xa1","\xf2","\x20","\x72"),
	::String(null())
};

void UInt32Array_Impl__obj::__register()
{
	hx::Object *dummy = new UInt32Array_Impl__obj;
	UInt32Array_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.io._UInt32Array.UInt32Array_Impl_","\x73","\x78","\x4d","\x5a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UInt32Array_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = UInt32Array_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(UInt32Array_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< UInt32Array_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UInt32Array_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UInt32Array_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UInt32Array_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace io
} // end namespace _UInt32Array
